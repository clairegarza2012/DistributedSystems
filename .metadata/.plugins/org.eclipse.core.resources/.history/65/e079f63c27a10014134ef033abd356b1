package edu.neumont.csc380;

import java.io.IOException;
import java.util.ArrayList;
import javax.swing.Timer;

public class Client {

	private Timer timer;
	private MyTimer myTimer;

	private ArrayList<String> ids;
	private ClientCRUD crud;
	
	public static void main(String[] args){

		try {
			new Client();

		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	public Client() throws IOException{

		initializeVariablesAndStartTimer();

		createObjects();

		getObjectIds();

		System.out.println("Number Of Id's: " + ids.size());

		readObjects();

		readObjects();

		stopTimer();
	}

	private void initializeVariablesAndStartTimer() throws IOException {

		ids = new ArrayList<String>();
		crud = new ClientCRUD();
		
		myTimer = new MyTimer();
		timer = new Timer(1000, myTimer);
		timer.start();		
	}

	private void createObjects() {

		boolean serverFull = false;

		while (!serverFull) {

			HallaStorObject obj = ObjectGenerator.generate();

			System.out.println("Object Created!" + " \n" + obj.toString());

			serverFull = crud.create("", obj);
		}

	}

	private void getObjectIds() {

		String ids = null;
		
		ids = crud.getIds();

		getIds(ids);
	}

	private void getIds(String line) {

		System.out.println("Getting Ids");

		int lineBreak = 17;
		int placeInLine = 0;

		System.out.println("Line Length: " + line.length());

		while (placeInLine < (line.length() - 1)){

			String id = line.substring(placeInLine, placeInLine + lineBreak);
			System.out.println("Id: " + id);
			ids.add(id);
			placeInLine += lineBreak;
		}		

	}

	private void readObjects() {

		for (int index = 0; index < ids.size(); index++) {

			synchronized (ids.get(index)){

				HallaStorObject obj = (HallaStorObject) crud.read(ids.get(index));

				obj.update();
				
				crud.update(ids.get(index), obj);
			}
		}

	}

	private void stopTimer() throws IOException {

		timer.stop();
		System.out.println("Time: "  + myTimer.getTime());	
	}


}

