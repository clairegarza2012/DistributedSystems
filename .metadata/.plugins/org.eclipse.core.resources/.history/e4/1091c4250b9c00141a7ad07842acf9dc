package edu.neumont.csc380;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.PrintStream;
import java.net.Socket;
import java.util.ArrayList;

import javax.swing.Timer;

public class Client {

	private boolean serverFull = false;
	private boolean allIds = false;

	private BufferedReader buffReader;
	private PrintStream ps;

	private Protocol protocol;

	private Timer timer;
	private MyTimer myTimer;

	private ArrayList<String> ids;

	public static void main(String[] args){

		try {
			new Client();

		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	@SuppressWarnings("resource")
	public Client() throws IOException{

		Socket clientSocket = new Socket("localhost", 2222);

		System.out.println("Client Socket Created!");

		initializeVariablesAndStartTimer();
		
		// make objects
			
		// get ids
		
		// read objects
		
		// update objects
		
		// read objects
		
		InputStream is = clientSocket.getInputStream();
		buffReader = new BufferedReader(new InputStreamReader(is));

		OutputStream os = clientSocket.getOutputStream();
		ps = new PrintStream(os, true);

		ServerListener listener = new ServerListener();
		listener.start();

		Talker talker = new Talker();
		talker.start();
	}

	private void initializeVariablesAndStartTimer() {
		
		ids = new ArrayList<String>();
		protocol = new Protocol();

		myTimer = new MyTimer();
		timer = new Timer(1000, myTimer);
		timer.start();		
	}

	private class Talker extends Thread {

		public void run(){

			while(!serverFull){

				// send objects to server
				String obj = ObjectGenerator.generate();

				System.out.println("Object Created!" + " \n" + obj);

				ps.println("c" + obj);

				System.out.println("Object Pushed to server: type:" + obj.charAt(0) + " id: " + Integer.parseInt(obj.substring(1, 17), 2) );

				try {
					Thread.sleep(5000);
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
			}

			// Communicate to server to get all the ids			
			ps.println("gg" + String.format("%16s", Integer.toBinaryString(1)).replace(" ", "0"));
		}
	}

	private class ServerListener extends Thread {

		public void run () {

			while (true){
				try {
					while(buffReader.ready()){

						String line = buffReader.readLine();
						System.out.println("Message from Server: \n" + line);

						if (line.equals("Server Is Full!")) {
							serverFull = true;
						}else if (line.charAt(0) == 'r') {
							RaceCar racecar = protocol.deprotocolRacecar(line);
							updateRacecar(racecar);
						}else if (line.charAt(0) == 'd') {
							Driver driver = protocol.deprotocolDriver(line);
							updateDriver(driver);
						}else if (line.substring(0, 2).equals("gr")){
							System.out.println("All Ids");
							getIds(line.substring(2));

							ReadAndUpdate rau = new ReadAndUpdate();
							rau.start();
						}

					}
				} catch (IOException e) {
					e.printStackTrace();
				} 
			}

		}

		private void getIds(String line) {
			System.out.println("Getting Ids");

			int lineBreak = 17;
			int placeInLine = 0;

			System.out.println("Line Length: " + line.length());
			
			while (placeInLine < (line.length() - 1)){

				String id = line.substring(placeInLine, placeInLine + lineBreak);
				System.out.println("Id: " + id);
				ids.add(id);
				placeInLine += lineBreak;
			}			
		}

		private void updateRacecar(RaceCar racecar) {

			int horsepower = racecar.getHorsePower();
			racecar.setHorsePower(horsepower + 1003);

			String racecarProtocol = protocol.protocolRacecar(racecar);
			ps.println("u" + racecarProtocol);
		}

		private void updateDriver(Driver driver) {

			int age = driver.getAge();
			driver.setAge(age + 100);

			String driverProtocol = protocol.protocolDriver(driver);
			ps.println("u" + driverProtocol);
		}

	}

	private class ReadAndUpdate extends Thread {

		public void run () {

			System.out.println("Number Of Id's: " + ids.size());

			for (int index = 0; index < ids.size(); index++) {

				synchronized (ids.get(index)){
					ps.println("r" + ids.get(index));
	
					try {
						Thread.sleep(5000);
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
				}
			}

			for (int index = 0; index < ids.size(); index++) {

				synchronized (ids.get(index)){
					ps.println("r" + ids.get(index));
	
					try {
						Thread.sleep(5000);
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
				}
			}

			timer.stop();
			System.out.println("Time: "  + myTimer.getTime());
		}
	}

}

